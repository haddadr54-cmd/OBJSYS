import fs from 'fs';
import path from 'path';
import FormData from 'form-data';
import https from 'https';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Token da API do Discloud (preferencialmente via vari√°vel de ambiente)
const DISCLOUD_TOKEN = process.env.DISCLOUD_TOKEN || 'eyJhbGciOiJIUzI1NiJ9.eyJpZCI6IjY2NTgyMzE3OTkyNzkiLCJrZXkiOiIzYzkxNDg4YTk1MDE1ZmQxODI0NDY4ZGIwODg4In0.H5Hc232a1Lb8NPVc3aEWqm43JgPkCvOegwvRirAB9Xo';

// Caminho para o arquivo ZIP (aceita argumento de linha de comando)
const argFile = process.argv[2];
const ZIP_FILE = argFile
    ? path.isAbsolute(argFile) ? argFile : path.join(__dirname, '..', argFile)
    : path.join(__dirname, '..', 'sistema-objetivo-discloud.zip');

console.log('üöÄ DEPLOY AUTOM√ÅTICO SISTEMA OBJETIVO - DISCLOUD API');
console.log('================================================');

// Verificar se o arquivo ZIP existe
if (!fs.existsSync(ZIP_FILE)) {
    console.error('‚ùå Arquivo ZIP n√£o encontrado:', ZIP_FILE);
    console.log('üí° Execute primeiro: npm run deploy:zip');
    process.exit(1);
}

// Fun√ß√£o para fazer o upload via API
async function uploadToDiscloud() {
    try {
        console.log('üì¶ Preparando upload do arquivo:', path.basename(ZIP_FILE));
        
        // Criar FormData
        const form = new FormData();
        form.append('file', fs.createReadStream(ZIP_FILE));
        
        // Op√ß√µes da requisi√ß√£o
        const options = {
            hostname: 'api.discloud.app',
            port: 443,
            path: '/v2/upload',
            method: 'POST',
            headers: {
                'api-token': DISCLOUD_TOKEN,
                ...form.getHeaders()
            }
        };
        
    console.log('üåê Enviando para Discloud...');
        
        // Fazer a requisi√ß√£o
        const req = https.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    const response = JSON.parse(data);
                    
                    const httpOk = res.statusCode === 200 || res.statusCode === 201;
                    const apiOk = response?.status && /^(success|ok)$/i.test(response.status);

                    if (httpOk && apiOk) {
                        console.log('‚úÖ Deploy realizado com sucesso!');
                        console.log('üìä Resposta:', response);
                        if (response.url) console.log('üåê URL da aplica√ß√£o:', response.url);
                        console.log('\nüéâ Sistema Objetivo est√° online no Discloud!');
                        return;
                    }

                    // HTTP OK mas API retornou erro (ex.: sem subdom√≠nio aprovado)
                    if (httpOk && !apiOk) {
                        console.warn('‚ö†Ô∏è Upload conclu√≠do, por√©m a API retornou status de erro.');
                        console.warn('üì© Mensagem:', response?.message ?? 'Sem mensagem.');
                        if (typeof response?.message === 'string' && response.message.includes('subdom√≠nio')) {
                            console.warn('\n‚ÑπÔ∏è A√ß√£o necess√°ria no painel:');
                            console.warn('- Acesse o painel do Discloud, se√ß√£o Sites.');
                            console.warn('- Solicite/ative um subdom√≠nio gratuito para sua conta ou vincule um dom√≠nio pr√≥prio.');
                            console.warn('- Ap√≥s aprovado, rode novamente o deploy.');
                        }
                        return;
                    }

                    // Erro HTTP ou resposta inv√°lida
                    console.error('‚ùå Erro no deploy:', response);
                    console.error('üìã Status HTTP:', res.statusCode);
                } catch (error) {
                    console.error('‚ùå Erro ao processar resposta:', error.message);
                    console.log('üìÑ Resposta bruta:', data);
                }
            });
        });
        
        req.on('error', (error) => {
            console.error('‚ùå Erro na requisi√ß√£o:', error.message);
        });
        
        // Enviar o FormData
        form.pipe(req);
        
    } catch (error) {
        console.error('‚ùå Erro geral:', error.message);
    }
}

// Executar o upload
uploadToDiscloud();