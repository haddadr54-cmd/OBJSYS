name: Deploy to Vercel

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  # Optional fallback: if Vercel project envs are not set, use GitHub Secrets
  VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
  VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Fallback env injection for Vite (if not provided by Vercel)
        run: |
          echo "Preparing .env.production for Vite build"
          if [ -n "${VITE_SUPABASE_URL}" ] && [ -n "${VITE_SUPABASE_ANON_KEY}" ]; then
            echo "VITE_SUPABASE_URL=${VITE_SUPABASE_URL}" >> .env.production
            echo "VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}" >> .env.production
            echo "Wrote VITE_* vars to .env.production"
          else
            echo "VITE_* secrets not set in GitHub; relying on 'vercel pull' vars."
          fi

      - name: Diagnose Supabase config (no secrets)
        run: |
          echo "Diagnosing Supabase env availability for Vite"
          CONFIGURED=false
          SOURCE="none"
          if [ -f ".env.production" ] && grep -q '^VITE_SUPABASE_URL=' .env.production && grep -q '^VITE_SUPABASE_ANON_KEY=' .env.production; then
            CONFIGURED=true; SOURCE=".env.production";
          elif [ -f ".vercel/.env.production.local" ] && grep -q '^VITE_SUPABASE_URL=' .vercel/.env.production.local && grep -q '^VITE_SUPABASE_ANON_KEY=' .vercel/.env.production.local; then
            CONFIGURED=true; SOURCE=".vercel/.env.production.local";
          elif [ -f ".vercel/.env.local" ] && grep -q '^VITE_SUPABASE_URL=' .vercel/.env.local && grep -q '^VITE_SUPABASE_ANON_KEY=' .vercel/.env.local; then
            CONFIGURED=true; SOURCE=".vercel/.env.local";
          elif [ -n "${VITE_SUPABASE_URL}" ] && [ -n "${VITE_SUPABASE_ANON_KEY}" ]; then
            CONFIGURED=true; SOURCE="process.env";
          fi
          echo "SUPABASE_CONFIGURED=${CONFIGURED} (source=${SOURCE})"

      - name: Build Project (Vercel)
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project (Vercel)
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
